'use strict';

var FunctionTemplating = {};

/**
 * Appends content to an element
 *
 * @param {HTMLElement} element
 * @param {Object} content
 */
function append(element, content) {
    if(Object.prototype.toString.call(content) === '[object Array]') {
        for(let i in content) {
            append(element, content[i]);
        }

    } else if(content) {
        // jQuery logic
        if(typeof jQuery !== 'undefined') {
            if(element instanceof jQuery == false) {
                element = $(element);
            }

            element.append(content);

        // Native JavaScript logic
        } else {
            if(typeof content === 'number' || typeof content === 'string') {
                element.innerHTML += content.toString();
            
            } else {
                element.appendChild(content);
        
            }
        }
    }
}

/**
 * Assigns event handler shorthands to element
 * This is done to prevent extending the HTMLElement prototype
 *
 * @param {HTMLElement} element
 */
function assignEvents(element) {
    /**
     * Handles the 'addEventListener' method
     *
     * @param {String} type
     * @param {Function} callback
     */
    element.on = function on(type, callback) {
        element.addEventListener(type, callback);

        return element;
    };

    /**
     * Handles the 'removeEventListener' method
     *
     * @param {String} type
     * @param {Function} callback
     */
    element.off = function off(type, callback) {
        element.removeEventListener(type, callback);

        return element;
    };

    /**
     * Removes an element
     */
    element.remove = function remove() {
        element.parentNode.removeChild(element);
    };

    // Define shorthand methods
    let shorthands = [
        'blur',
        'change',
        'click',
        'focus',
        'hover',
        'keydown',
        'keypress',
        'keyup',
        'mousedown',
        'mouseenter',
        'mouseleave',
        'mouseout',
        'mouseover',
        'mouseup',
        'select'
    ];

    for(let shorthand of shorthands) {
        element[shorthand] = (callback) => {
            return element.on(shorthand, callback);
        };
    } 
}

/**
 * Creates an element
 *
 * @param {String} tag
 * @param {Object} attr
 * @param {Object} contents
 *
 * @returns {HTMLElement} element
 */
function create(tag, attr, contents) {
    let element = document.createElement(tag.toUpperCase());
  
    let isContents = (obj) => {
        if(!obj) { return false; }

        return obj instanceof Array ||
            obj instanceof HTMLElement || 
            (typeof jQuery !== 'undefined' && obj instanceof jQuery) ||
            typeof obj === 'string' ||
            typeof obj === 'number';
    };

    // The attribute parameter is the content
    if(isContents(attr)) {
        contents = [ attr, contents ];   
    
    // The attribute parameter was defined as an object
    } else if (
        typeof attr !== 'undefined' &&
        attr instanceof Object &&
        attr instanceof Array == false
    ) {
        try {
            for(var k in attr) {
                // Null, undefined or false values should not be included
                if(!attr[k] && attr[k] !== 0) { continue; }

                element.setAttribute(k, attr[k]);
            }
        } catch(e) {
            console.log(e);

            console.log(attr, isContents(attr));
        }
    }
       
    append(element, contents);
    
    // jQuery logic
    if(typeof jQuery !== 'undefined') {
        return $(element);

    // Native JavaScript logic
    } else {
        // Assign custom event functions to element instead of extending the prototype
        assignEvents(element);
        
        return element;
    }
}

/**
 * Declares a rendering method
 *
 * @param {String} tag
 */
function declareMethod(tag) {
    FunctionTemplating[tag] = function(attr, ...contents) {
        return create(tag, attr, contents);
    };
}

/**
 * Appends content using the function templating rules
 *
 * @params {HTMLElement} parentElement
 * @params {HTMLElement} contents
 */
FunctionTemplating.append = function(parentElement, ...contents) {
    append(parentElement, contents);
}

/**
 * Renders content based on a condition
 * 
 * @param {Boolean} condition
 * @param {HTMLElement} contents
 *
 * @returns {HTMLElement} contents
 */
FunctionTemplating.if = function(condition, ...contents) {
    if(
        condition != false &&
        condition != null &&
        condition != undefined
    ) {
        return contents;
    }
};

/**
 * Loops through an array or object, rendering elements from model data
 *
 * @param {Object} array
 * @param {Function} callback
 *
 * @returns {HTMLElement} elements
 */
FunctionTemplating.each = function(array, callback) {
    var elements = [];

    for(var i in array) {
        var element = callback(i, array[i]);

        if(element) {
            elements.push(element);
        }
    }
     
    return elements;
};

/**
 * Loops a given number of times, rendering elements for each pass
 *
 * @param {Number} iterations
 * @param {Function} callback
 *
 * @returns {HTMLElement} elements
 */
FunctionTemplating.loop = function(iterations, callback) {
    var elements = [];

    for(var i = 0; i <= iterations; i++) {
        var element = callback(i);

        if(element) {
            elements.push(element);
        }
    }
     
    return elements;
};

/**
 * A shorthand for document.querySelector
 *
 * @param {String} query
 *
 * @returns {HTMLElement} element
 */
FunctionTemplating.find = function(query) {
    let element = document.querySelector(query);
    
    if(!element) { return null; }

    if(typeof jQuery !== 'undefined') {
        return $(element);
    
    } else {
        assignEvents(element);

        return element;
    
    }
};

/**
 * A shorthand for document.querySelectorAll
 *
 * @param {String} query
 *
 * @returns {HTMLElement[]} element
 */
FunctionTemplating.findAll = function(query) {
    let elements = document.querySelectorAll(query);
    
    if(!elements) { return []; }

    if(typeof jQuery !== 'undefined') {
        return $(elements);
    
    } else {
        let array = [];

        for(let i = 0; i < elements.length; i++) {
            array[i] = elements[i];
            assignEvents(array[i]);
        }

        return array;
    }
};

// ----------
// Init all element types
// ----------
let elementTypes = [
    // Block elements
    'div', 'section', 'nav', 'hr', 'label', 'textarea', 'audio', 'video', 'canvas', 'iframe',

    // Inline elements
    'img',

    // Table elements
    'table', 'thead', 'tbody', 'th', 'td', 'tr',

    // Select
    'select', 'option', 'optgroup', 'input',

    // Headings
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',

    // Body text
    'span', 'p', 'strong', 'b',

    // Action buttons
    'a', 'button',

    // SVG
    'polygon', 'svg',
    
    // List
    'ol', 'ul', 'li',

    // Forms
    'form', 'input'
];

for(var i in elementTypes) {
    declareMethod(elementTypes[i]);
}

window._ = FunctionTemplating;
