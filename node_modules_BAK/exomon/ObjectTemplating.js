'use strict';

let elementTags = [
    // Block elements
    'div', 'section', 'nav', 'hr', 'label', 'textarea', 'audio', 'video', 'canvas', 'iframe',

    // Inline elements
    'img',

    // Table elements
    'table', 'thead', 'tbody', 'th', 'td', 'tr',

    // Select
    'select', 'option', 'input',

    // Headings
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',

    // Body text
    'span', 'p', 'strong', 'b',

    // Action buttons
    'a', 'button',

    // List
    'ol', 'ul', 'li',

    // Forms
    'form', 'input'
];

class ObjectTemplating {
    constructor(object) {
        let template = this;
        let $elements = [];

        this.$elements = {};

        function getTagName(key) {
            for(let i in elementTags) {
                let elementTagName = elementTags[i];

                if(key.indexOf(elementTagName) == 0) {
                    return elementTagName;
                }
            }

            return null;
        }

        function createElement(tag) {
            return $('<' + tag + '></' + tag + '>');
        }

        function parseObject(obj, $parentElement) {
            if(typeof obj === 'string' && $parentElement) {
                $parentElement.append(obj);
            
            } else { 
                for(let k in obj) {
                    let v = obj[k];
                    
                    // ----------
                    // Function keywords
                    // ----------
                    // Each
                    if(k == 'each') {
                        if(Array.isArray(v)) {
                            let array = v[0];
                            let iterator  = v[1];

                            for(let i in array) {
                                let newObject = iterator(i, array[i]);

                                if(newObject) {
                                    let $newElement = new ObjectTemplating(newObject);

                                    if($newElement) {
                                        if($parentElement) {
                                            $parentElement.append($newElement);
                                        } else {
                                            $elements[$elements.length] = $newElement;
                                        }
                                    }
                                }
                            }
                        
                        } else {
                            console.log('[Exomon] Usage of "each": Array([Array/Object], [Function]). Argument provided was of type "' + (typeof v) + '"');
                        
                        }

                    // Content / HTML
                    } else if(k == 'content' || k == 'html') {
                        if($parentElement) {
                            $parentElement.append(v);
                        } else {
                            $elements[$elements.length] = v;
                        }

                    // Events / on
                    } else if(k == 'events' || k == 'on') {
                        if($parentElement) {
                            for(let eventName in v) {
                                $parentElement.on(eventName, v[eventName]);
                            }
                        }
                    
                    } else {
                        // ----------
                        // Create element
                        // ----------
                        let keyTagName = getTagName(k);

                        if(keyTagName) {
                            let $newElement = createElement(keyTagName);
                            let elementName = k.replace(keyTagName, '');
                
                            if(elementName) {
                                if(elementName[0] == '_') {
                                    elementName = elementName.slice(1);
                                }

                                elementName = elementName.charAt(0).toLowerCase() + elementName.slice(1);

                                template.$elements[elementName] = $newElement;
                            }

                            parseObject(v, $newElement);

                            if($parentElement) {
                                $parentElement.append($newElement);

                            } else {
                                $elements[$elements.length] = $newElement;
                            }

                        // ----------
                        // Add attributes to parent element
                        // ----------
                        } else {
                            if($parentElement) {
                                $parentElement.attr(k, v);
                            }
                        }
                    }
                }
            }
        }

        parseObject(object);

        if($elements.length < 1) {
            this.html = null;
        
        } else if($elements.length == 1) {
            this.html = $elements[0];

        } else {
            this.html = $elements;

        }
    }

    /**
     * Returns the generated html
     */
    html() {
        return this.html;
    }
}

module.exports = ObjectTemplating;

window.Template = ObjectTemplating;
