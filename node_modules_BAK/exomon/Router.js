'use strict';

let pathToRegexp = require('path-to-regexp');

let routes = [];

class Router {
    /**
     * Creates a new route
     *
     * @param {String} path
     * @param {Function} controller
     */
    static route(path, controller) {
        routes[path] = {
            controller: controller
        }
    }

    /**
     * Goes to the route
     *
     * @param {String} url
     * @param {Boolean} quiet
     */
    static go(url, quiet) {
        if(quiet) {
            window.history.pushState(url, url, '#' + url);
            this.directToRoute(url, true);
        } else {
            location.hash = url;
        }
    }
       
    /**
     * Goes to the base directory
     */
    static goToBaseDir() {
        let url = this.url || '/';
        let base = new String(url).substring(0, url.lastIndexOf('/'));
        
        this.go(base);
    }

    /**
     * Gets a query string parameter
     *
     * @param {String} name
     *
     * @returns {String} Value
     */
    static query(name) {
        let url = window.location.href;
        
        name = name.replace(/[\[\]]/g, "\\$&");
        
        let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
        let results = regex.exec(url);

        if (!results) return null;
        if (!results[2]) return '';
        
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    /**
     * Directs to the route
     *
     * @param {String} url
     * @param {Boolean} quiet
     */
    static directToRoute(url, quiet) {
        // Look for route
        let context = {};
        let route;

        // Exact match
        if(routes[url]) {
            route = routes[url];

        // Use path to regexp
        } else {
            for(let path in routes) {
                let keys = [];
                let re = pathToRegexp(path, keys);
                let values = re.exec(url);
                
                // A match was found
                if(re.test(url)) {
                    // Set the route
                    route = routes[path];

                    // Add context variables (first result (0) is the entire path,
                    // so assign that manually and start the counter at 1 instead)
                    route.url = url; 
                    let counter = 1;

                    for(let key of keys) {
                        route[key.name] = values[counter];
                        Router.params[key.name] = values[counter];

                        counter++;
                    }
                
                    break;
                }
            }

        }

        Router.url = url;

        if(route && !quiet) {
            route.controller();
        }
    }

    /**
     * Initialise
     */
    static init() {
        // Get the url
        let url = location.hash.slice(1) || '/';
        let trimmed = url.substring(0, url.indexOf('?'));
       
        Router.params = {};                    

        if(trimmed) {
            url = trimmed;
        }

        // If a check is implemented, execute it
        if(typeof Router.check === 'function') {
            Router.check(
                // Pass the proposed route
                url,

                // Cancel method
                () => {
                    location.hash = Router.url;
                },

                // Proceed method
                () => {
                    Router.directToRoute(url);
                }
            );

        // If not, proceed as normal
        } else {
            Router.directToRoute(url);

        }
    }
}

window.addEventListener('hashchange', Router.init); 
window.Router = Router;
